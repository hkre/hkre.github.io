<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nacos</title>
    <link href="/2022/11/16/202211/nacos/"/>
    <url>/2022/11/16/202211/nacos/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>Stream流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stream流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stream流</title>
    <link href="/2022/11/15/202211/Stream%E6%B5%81/"/>
    <url>/2022/11/15/202211/Stream%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>Stream流</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stream流</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目依赖冲突</title>
    <link href="/2022/11/14/202211/%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
    <url>/2022/11/14/202211/%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="项目依赖冲突"><a href="#项目依赖冲突" class="headerlink" title="项目依赖冲突"></a>项目依赖冲突</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目依赖冲突</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea快捷键</title>
    <link href="/2022/11/13/202211/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2022/11/13/202211/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Idea快捷键"><a href="#Idea快捷键" class="headerlink" title="Idea快捷键"></a>Idea快捷键</h1></blockquote><h1 id="1-Idea快捷键"><a href="#1-Idea快捷键" class="headerlink" title="1.Idea快捷键"></a>1.Idea快捷键</h1>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea快捷键</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatisPlus-join</title>
    <link href="/2022/11/12/202211/mybatisplus-join/"/>
    <url>/2022/11/12/202211/mybatisplus-join/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="MybatisPlus-join"><a href="#MybatisPlus-join" class="headerlink" title="MybatisPlus-join"></a>MybatisPlus-join</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>orm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatisPlus-join</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven</title>
    <link href="/2022/11/11/202211/maven/"/>
    <url>/2022/11/11/202211/maven/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1></blockquote><h1 id="1-maven安装"><a href="#1-maven安装" class="headerlink" title="1.maven安装"></a>1.maven安装</h1>]]></content>
    
    
    <categories>
      
      <category>Maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志框架</title>
    <link href="/2022/11/10/202211/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
    <url>/2022/11/10/202211/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>日志框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日志框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins</title>
    <link href="/2022/11/09/202211/Jenkins/"/>
    <url>/2022/11/09/202211/Jenkins/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源项目</title>
    <link href="/2022/11/08/202211/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/11/08/202211/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="人人网开源项目"><a href="#人人网开源项目" class="headerlink" title="人人网开源项目"></a>人人网开源项目</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>开源项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开源项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springCloud Alibaba</title>
    <link href="/2022/11/07/202211/springCloud%20Alibaba/"/>
    <url>/2022/11/07/202211/springCloud%20Alibaba/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="springCloud-Alibaba"><a href="#springCloud-Alibaba" class="headerlink" title="springCloud Alibaba"></a>springCloud Alibaba</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>微服务框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springCloud Alibaba</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2022/11/06/202211/Vue/"/>
    <url>/2022/11/06/202211/Vue/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端组件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatisPlus</title>
    <link href="/2022/11/05/202211/mybatisplus/"/>
    <url>/2022/11/05/202211/mybatisplus/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h1></blockquote>]]></content>
    
    
    <categories>
      
      <category>orm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatisPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2022/11/04/202211/Redis/"/>
    <url>/2022/11/04/202211/Redis/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1></blockquote><h1 id="1-redis安装"><a href="#1-redis安装" class="headerlink" title="1.redis安装"></a>1.redis安装</h1>]]></content>
    
    
    <categories>
      
      <category>缓存</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker容器</title>
    <link href="/2022/11/03/202211/docker%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/11/03/202211/docker%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1></blockquote><h1 id="1-docker启动"><a href="#1-docker启动" class="headerlink" title="1 docker启动"></a>1 docker启动</h1><h2 id="1-1容器文件挂载与端口映射"><a href="#1-1容器文件挂载与端口映射" class="headerlink" title="1.1容器文件挂载与端口映射"></a>1.1容器文件挂载与端口映射</h2>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务架构</title>
    <link href="/2022/11/02/202211/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    <url>/2022/11/02/202211/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1></blockquote><h1 id="1-微服务架构图"><a href="#1-微服务架构图" class="headerlink" title="1:微服务架构图"></a>1:微服务架构图</h1><h3 id="1-1微服务划分"><a href="#1-1微服务划分" class="headerlink" title="1.1微服务划分"></a>1.1微服务划分</h3><h3 id="1-2集群-amp-分布式-amp-节点"><a href="#1-2集群-amp-分布式-amp-节点" class="headerlink" title="1.2集群&amp;分布式&amp;节点"></a>1.2集群&amp;分布式&amp;节点</h3><h3 id="1-3远程调用"><a href="#1-3远程调用" class="headerlink" title="1.3远程调用"></a>1.3远程调用</h3><h3 id="1-4负责均衡"><a href="#1-4负责均衡" class="headerlink" title="1.4负责均衡"></a>1.4负责均衡</h3><h3 id="1-5服务注册、配置中心"><a href="#1-5服务注册、配置中心" class="headerlink" title="1.5服务注册、配置中心"></a>1.5服务注册、配置中心</h3><h3 id="1-6服务熔断"><a href="#1-6服务熔断" class="headerlink" title="1.6服务熔断"></a>1.6服务熔断</h3><h3 id="1-7网关"><a href="#1-7网关" class="headerlink" title="1.7网关"></a>1.7网关</h3>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微服务架构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rocektMq</title>
    <link href="/2022/11/01/202211/RocektMQ/"/>
    <url>/2022/11/01/202211/RocektMQ/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="RocektMq"><a href="#RocektMq" class="headerlink" title="RocektMq"></a>RocektMq</h1></blockquote><h1 id="1-架构"><a href="#1-架构" class="headerlink" title="1:架构"></a>1:架构</h1><h2 id="1-1消费端与客户端"><a href="#1-1消费端与客户端" class="headerlink" title="1.1消费端与客户端"></a>1.1消费端与客户端</h2><h2 id="1-2消息代理Boker"><a href="#1-2消息代理Boker" class="headerlink" title="1.2消息代理Boker"></a>1.2消息代理Boker</h2><h2 id="1-3NameServer"><a href="#1-3NameServer" class="headerlink" title="1.3NameServer"></a>1.3NameServer</h2>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rocektMq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息中间件</title>
    <link href="/2022/10/31/202210/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2022/10/31/202210/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1></blockquote><h2 id="1消息中间件"><a href="#1消息中间件" class="headerlink" title="1消息中间件"></a>1消息中间件</h2><h3 id="1-1消息中间件分类"><a href="#1-1消息中间件分类" class="headerlink" title="1.1消息中间件分类"></a>1.1消息中间件分类</h3><table><thead><tr><th>消息中间件名称</th><th>实现语言</th><th>是否支持MQ协议</th></tr></thead><tbody><tr><td>ActiveMQ</td><td>java</td><td>是</td></tr><tr><td>kafka</td><td>scale&#x2F;java</td><td>否</td></tr><tr><td>RocketMQ</td><td>java</td><td>否</td></tr><tr><td>RabbitMQ</td><td>erlang</td><td>是</td></tr></tbody></table><h3 id="1-2消息中间件的作用"><a href="#1-2消息中间件的作用" class="headerlink" title="1.2消息中间件的作用"></a>1.2消息中间件的作用</h3><ul><li><input disabled type="checkbox"> 削峰降流</li><li><input disabled type="checkbox"> 系统解耦</li><li><input disabled type="checkbox"> 数据采集</li></ul>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>消息中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产者和消费者</title>
    <link href="/2022/10/30/202210/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/"/>
    <url>/2022/10/30/202210/%E7%94%9F%E4%BA%A7%E8%80%85%E5%92%8C%E6%B6%88%E8%B4%B9%E8%80%85/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h1></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cake</span> &#123;<br>    <span class="hljs-comment">//蛋糕数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br><br>    <span class="hljs-comment">//吃蛋糕</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eatCake</span><span class="hljs-params">()</span> &#123;<br><br><br>        <span class="hljs-comment">//定义标志位</span><br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.getNum() == <span class="hljs-number">0</span>) &#123;<br>                condition.await();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;---------开始吃蛋糕----------&quot;</span>);<br>            num--;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;在吃蛋糕,还剩&quot;</span> + num + <span class="hljs-string">&quot;块&quot;</span>);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br><br><br><br>    &#125;<br><br>    <span class="hljs-comment">//制作蛋糕</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeCake</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//定义标志位</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.getNum() != <span class="hljs-number">0</span>) &#123;<br>                condition.await();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;---------开始做蛋糕----------&quot;</span>);<br>            num++;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;在做蛋糕,还剩&quot;</span> + num + <span class="hljs-string">&quot;块&quot;</span>);<br>            condition.signalAll();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getNum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.num;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EatCakeDemo</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        <span class="hljs-type">Cake</span> <span class="hljs-variable">cake</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cake</span>();<br>        <span class="hljs-comment">//定义消费者和生产者</span><br><br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                    cake.makeCake();<br>                &#125;, <span class="hljs-string">&quot;生产者&quot;</span>+String.valueOf(i)).start();<br>            &#125;<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>                  cake.eatCake();<br><br>                &#125;, <span class="hljs-string">&quot;消费者&quot;</span>+String.valueOf(i)).start();<br><br><br>            &#125;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">6</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;结束了&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.util.contract;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CasLockUtil</span> &#123;<br><br>    Map&lt;String, Object&gt; lockAche = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>    Map&lt;String, ReentrantLock&gt; ReentrantLockAche = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">repeatExec</span><span class="hljs-params">(String key, Runnable runnable)</span> &#123;<br>        <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ReentrantLockAche.computeIfAbsent(key, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            o.lock();<br>            runnable.run();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (o.getQueueLength() == <span class="hljs-number">0</span>) &#123;<br>                ReentrantLockAche.remove(key);<br>            &#125;<br><br>            o.unlock();<br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">Map &lt; String, Object &gt; lockCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span> &lt; &gt; ();<br><br>@<br>Autowired<br>CasLockUtil casLockUtil;<br><br>@<br>ResponseBody@ RequestMapping(value = <span class="hljs-string">&quot;/process/&#123;orderId&#125;&quot;</span>)<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br>    casLockUtil.repeatExec(orderId, () - &gt; &#123;<br>        logger.debug(Thread.currentThread().getName() + <span class="hljs-string">&quot;号线程[&#123;&#125;]开始&quot;</span>, orderId);<br>        <span class="hljs-comment">//            this.service();</span><br>        System.out.println();<br>        logger.debug(Thread.currentThread().getName() + <span class="hljs-string">&quot;号线程[&#123;&#125;]结束&quot;</span>, orderId);<br>        lockCache.remove(orderId);<br>    &#125;);<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;操作成功&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java并发编程</title>
    <link href="/2022/10/29/202210/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <url>/2022/10/29/202210/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="JAVA并发编程"><a href="#JAVA并发编程" class="headerlink" title="JAVA并发编程"></a>JAVA并发编程</h1></blockquote><h2 id="1-线程"><a href="#1-线程" class="headerlink" title="1:线程"></a>1:线程</h2><h3 id="1-1-线程的优先级"><a href="#1-1-线程的优先级" class="headerlink" title="1.1 线程的优先级"></a>1.1 线程的优先级</h3><blockquote><p>  线程的优先级并不能保证程序的正确性</p></blockquote><h3 id="1-2-线程的生命周期"><a href="#1-2-线程的生命周期" class="headerlink" title="1.2 线程的生命周期"></a>1.2 线程的生命周期</h3><table><thead><tr><th>状态名称</th><th>说明</th></tr></thead><tbody><tr><td>NEW</td><td>初始状态、线程被构建、但是还没有调用start()方法</td></tr><tr><td>RUNNABLE</td><td>运行状态、java线程将操作系统中的就绪和运行这两种状态称作运行中</td></tr><tr><td>BLOCKER</td><td>阻塞状态，表示该线程阻塞与锁</td></tr><tr><td>WAITTING</td><td>等待状态、表示线程进入等待状态、进入该状态表示当前线程需要等待其他线程做出一些特定状态(通知或中断)</td></tr><tr><td>TIME_WAITING</td><td>超时等待状态、该状态不同于WAITTING,它是可以在指定的时间返回</td></tr><tr><td>TERMNATED</td><td>终止状态，表示该线程已执行完毕</td></tr></tbody></table><h3 id="1-3线程的等待通知机制"><a href="#1-3线程的等待通知机制" class="headerlink" title="1.3线程的等待通知机制"></a>1.3线程的等待通知机制</h3><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>notify</td><td>通知一个在对象上等待的线程，使其从wait()方法返回。而返回的前提是该线程已经获取到了对象的锁</td></tr><tr><td>notifyAll</td><td>通知所有等待在该对象上的线程</td></tr><tr><td>wait</td><td>调用该方法的线程进入WAITING状态，只有等待另外的线程的通知或被中断才会返回，需要注意，调用wait()方法后，会释放对象的锁</td></tr><tr><td>wait(long)</td><td>超时等待一段时间，如果没有通知就返回</td></tr><tr><td>wait(long,int)</td><td>超时时间设置粒度到纳秒</td></tr></tbody></table><p>​                                             </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br>  <span class="hljs-comment">//锁住当前的实例对象</span><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br> <span class="hljs-comment">//锁住当前字符串对象</span><br>        <span class="hljs-keyword">synchronized</span> (orderId)&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br>  <span class="hljs-comment">//锁住当前字符串对象的值</span><br>        <span class="hljs-keyword">synchronized</span> (orderId.intern())&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">   Map&lt;String, Object&gt; lockCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> lockCache.get(orderId);<br>        <span class="hljs-keyword">if</span> (lock == <span class="hljs-literal">null</span>) &#123;<br>            lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>            lockCache.put(orderId, lock);<br>        &#125;<br><br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>            lockCache.remove(orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../../img/jmeter%E6%B5%8B%E8%AF%95.png" alt="jmeter测试"></p><p><img src="/../../img/%E5%87%BA%E7%8E%B0%E7%9B%B8%E5%90%8C%E7%9A%84%E8%AE%A2%E5%8D%95%E5%8F%B7%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C.png" alt="出现相同的订单号并发执行"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">volatile</span>  <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    Map&lt;String, Object&gt; lockCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br>            lock = lockCache.get(orderId);<br>            <span class="hljs-keyword">if</span> (lock == <span class="hljs-literal">null</span>) &#123;<br>                lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                lockCache.put(orderId, lock);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>            lockCache.remove(orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>    Map&lt;String, Object&gt; lockCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        lock = lockCache.computeIfAbsent(orderId, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br><span class="hljs-comment">//        synchronized (this)&#123;</span><br><span class="hljs-comment">//            lock = lockCache.get(orderId);</span><br><span class="hljs-comment">//            if (lock == null) &#123;</span><br><span class="hljs-comment">//                lock = new Object();</span><br><span class="hljs-comment">//                lockCache.put(orderId, lock);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-keyword">synchronized</span> (lock)&#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>            lockCache.remove(orderId);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseMapBuilder.newBuilder().putSuccess().getResult();<br>    &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CasLockUtil</span> &#123;<br><br>    Map&lt;String, Object&gt; lockAche = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;() ;<br><br>    <span class="hljs-keyword">public</span> Object  <span class="hljs-title function_">getLockAche</span><span class="hljs-params">(Object o)</span> &#123;<br>        o = lockAche.computeIfAbsent(o.toString(), k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exec</span><span class="hljs-params">(String key,Runnable runnable)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> lockAche.computeIfAbsent(key, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br><br>        <span class="hljs-keyword">synchronized</span> (o)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                runnable.run();<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                lockAche.remove(key);<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-meta">@Autowired</span><br>    CasLockUtil casLockUtil;<br><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/process/&#123;orderId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;orderId&quot;)</span> String orderId)</span> &#123;<br><br><span class="hljs-comment">//        synchronizedByKey.exec(orderId, () -&gt; &#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 开始&quot;, orderId);</span><br><span class="hljs-comment">//            service();      //  &lt;- sleep 1.5s</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;] 结束&quot;, orderId);</span><br><span class="hljs-comment">//        &#125;);</span><br><br><span class="hljs-comment">//        Object lock = null;</span><br><span class="hljs-comment">//        lock = lockCache.computeIfAbsent(orderId, k -&gt; new Object());</span><br><span class="hljs-comment">//        synchronized (this)&#123;</span><br><span class="hljs-comment">//            lock = lockCache.get(orderId);</span><br><span class="hljs-comment">//            if (lock == null) &#123;</span><br><span class="hljs-comment">//                lock = new Object();</span><br><span class="hljs-comment">//                lockCache.put(orderId, lock);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><br><span class="hljs-comment">//        synchronized (lock)&#123;</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;]开始&quot;,orderId);</span><br><span class="hljs-comment">//            this.service();</span><br><span class="hljs-comment">//            logger.debug(&quot;[&#123;&#125;]结束&quot;,orderId);</span><br><span class="hljs-comment">//            lockCache.remove(orderId);</span><br><span class="hljs-comment">//        &#125;</span><br>        casLockUtil.exec(orderId, ()-&gt; &#123;<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]开始&quot;</span>,orderId);<br>            <span class="hljs-built_in">this</span>.service();<br>            logger.debug(<span class="hljs-string">&quot;[&#123;&#125;]结束&quot;</span>,orderId);<br>            lockCache.remove(orderId);<br>        &#125;);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">repeatExec</span><span class="hljs-params">(String key,Runnable runnable)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ReentrantLockAche.computeIfAbsent(key, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>());<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            o.lock();<br>            runnable.run();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (o.getQueueLength() == <span class="hljs-number">0</span>) &#123;<br>                ReentrantLockAche.remove(key);<br>            &#125;<br><br>            o.unlock();<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>synchronized</title>
    <link href="/2022/10/28/202210/synchronized/"/>
    <url>/2022/10/28/202210/synchronized/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1></blockquote><h1 id="1-synchronized的定义"><a href="#1-synchronized的定义" class="headerlink" title="1:synchronized的定义"></a>1:synchronized的定义</h1><h2 id="1-1synchronized的使用形式"><a href="#1-1synchronized的使用形式" class="headerlink" title="1.1synchronized的使用形式"></a>1.1synchronized的使用形式</h2><h3 id="1-1-1三种使用形式"><a href="#1-1-1三种使用形式" class="headerlink" title="1.1.1三种使用形式"></a>1.1.1三种使用形式</h3><ul><li><input disabled type="checkbox"> 普通同步方法，锁的是当前实例对象</li><li><input disabled type="checkbox"> 静态同步方法,  锁的是当前类的Class对象</li><li><input disabled type="checkbox"> 同步代码块，锁的是synchronized括号</li></ul><blockquote><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。</p><p><strong>不过两者的本质都是对对象监视器 monitor 的获取。</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>synchronized</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发与并行</title>
    <link href="/2022/10/27/202210/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/"/>
    <url>/2022/10/27/202210/%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1></blockquote><h1 id="1-并发"><a href="#1-并发" class="headerlink" title="1:并发"></a>1:并发</h1><h2 id="1-1上下文切换"><a href="#1-1上下文切换" class="headerlink" title="1.1上下文切换"></a>1.1上下文切换</h2><p><em>cpu通过时间片来切换线程循环执行任务，jvm中的PC寄存器会记录上个线程执行的行数，以便下次从执行到的行数继续往下执行。</em></p><h4 id="1-1-1-减少上下文切换的开销"><a href="#1-1-1-减少上下文切换的开销" class="headerlink" title="1.1.1 减少上下文切换的开销"></a>1.1.1 减少上下文切换的开销</h4><ul><li><input disabled type="checkbox"> <em>无锁并发编程，数据的id安装Hash算法取模分段，不同线程处理不同段的数据</em></li><li><input disabled type="checkbox"> <em>CAS</em></li><li><input disabled type="checkbox"> <em>使用最少线程，干最多的事情，创建线程合理，避免大量线程处于等待状态</em></li><li><input disabled type="checkbox"> <em>协程</em></li></ul><h2 id="1-2：死锁"><a href="#1-2：死锁" class="headerlink" title="1.2：死锁"></a>1.2：死锁</h2><p><em>死锁是指两个线程执行过程中相关占用双方所需要的资源，导致两个线程都阻塞等待</em></p><h3 id="1-2-1-如何避免死锁"><a href="#1-2-1-如何避免死锁" class="headerlink" title="1.2.1:如何避免死锁"></a>1.2.1:如何避免死锁</h3><ul><li><p><input disabled type="checkbox"> <em>避免一个线程同时获多个锁</em></p></li><li><p><input disabled type="checkbox"> <em>避免一个线程在锁内占用多个资源，尽量保证每个锁只占用一个资源</em></p></li><li><p><input disabled type="checkbox"> <em>尝试使用定时锁，使用lock tryLock(timeout)来代替内部锁机制</em></p></li><li><p><input disabled type="checkbox"> <em>对于数据库锁，加锁与解锁必须在一个数据库连接里，否则会出现解锁失败的情况</em></p></li></ul><h2 id="1-3-volatile"><a href="#1-3-volatile" class="headerlink" title="1.3 volatile"></a>1.3 volatile</h2><h3 id="1-3-1轻量级的同步锁"><a href="#1-3-1轻量级的同步锁" class="headerlink" title="1.3.1轻量级的同步锁"></a>1.3.1轻量级的同步锁</h3><ul><li><p><input disabled type="checkbox"> <em>防止制定重排</em></p><blockquote><p><em>jvm在多线程环境下会对编译后的class文件进行优化选择执行，导致代码没有按照顺序执行</em></p></blockquote></li><li><p><input disabled type="checkbox"> <em>不能保证原子性</em></p><blockquote><p><em>不能像CAS机制一样，保证资源的被多个线程访问时的数据安全</em></p></blockquote></li><li><p><input disabled type="checkbox"> <em>对多个线程间保持透明</em></p><blockquote><p><em>多个线程访问一个资源时，一个线程改变资源后，其他线程可以获取修改后的值</em></p></blockquote></li></ul><h3 id="1-3-2实现原理"><a href="#1-3-2实现原理" class="headerlink" title="1.3.2实现原理"></a>1.3.2实现原理</h3><table><thead><tr><th>术语</th><th>英文单词</th><th>术语描述</th></tr></thead><tbody><tr><td><em>内存屏障</em></td><td><em>memory barriers</em></td><td><em>一组处理器指令，用于实现对内存操作的顺序限制。</em></td></tr><tr><td><em>缓冲行</em></td><td><em>cache line</em></td><td><em>缓存中可以分配的最小存储单位</em></td></tr><tr><td><em>原子操作</em></td><td><em>atomic operations</em></td><td><em>不可中断的一个或一系列操作</em></td></tr><tr><td><em>缓存行填充</em></td><td><em>cache line full</em></td><td><em>-当处理器识别到从内存中读取的操作数是可缓存的，处理器便读取整个缓冲行到适当缓存（L1、L2、L3…）。</em></td></tr><tr><td><em>缓存命中</em></td><td><em>cache hits</em></td><td><em>如果进行缓存的内存位置仍是下次处理器访问的地址时，处理器从缓存中读取，而不是内存。</em></td></tr><tr><td><em>写命中</em></td><td><em>write hit</em></td><td><em>要写的数据在缓存中，则直接写到缓存，而不是内存。</em></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="1-3-3-优化案例"><a href="#1-3-3-优化案例" class="headerlink" title="1.3.3 优化案例"></a>1.3.3 优化案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** 队列中的头部节点 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> f?inal PaddedAtomicReference&lt;QNode&gt; head;<br><span class="hljs-comment">/** 队列中的尾部节点 */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> f?inal PaddedAtomicReference&lt;QNode&gt; tail;<br><span class="hljs-keyword">static</span> f?inal <span class="hljs-keyword">class</span> <span class="hljs-title class_">PaddedAtomicReference</span> &lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AtomicReference</span> T&gt; &#123;<br><span class="hljs-comment">// 使用很多4个字节的引用追加到64个字节</span><br>        Object p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, pa, pb, pc, pd, pe;<br>        PaddedAtomicReference(T r) &#123;<br>        <span class="hljs-built_in">super</span>(r);<br>        &#125;<br>        &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicReference</span> &lt;V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> V value;<br><span class="hljs-comment">// 省略其他代码</span><br>｝<br><br></code></pre></td></tr></table></figure><ul><li><p><input disabled type="checkbox"> LinkedTransferQueue使用内部类PaddedAtomicReference来定义了头结点和尾巴节点。</p></li><li><p><input disabled type="checkbox"> 这个内部类做的事情就是把共享变量拓展追加了64个字节。父类变量4个字节，加上15个4字节的引用变量。</p></li><li><p><input disabled type="checkbox"> 因为对于大部分的处理器来说L1、L2、L3缓存的高速缓存行是64个字节宽。不支持部分填充缓存。如果队列的头结点和尾部节点都不是64个字节的话，那么他们就会被读到同一个高速缓存行。</p></li><li><p><input disabled type="checkbox"> 如果头结点和尾巴节点在同一个缓存行的时候，那么如果要修改头部节点，这个锁定了头部节点（MESI），而且尾部节点也在同一行，那么其他处理器是无法修改尾部节点的，问题是队列的入队和出队操作都是要修改头部和尾部节点，那么这个就会影响到队列的入队和出队的操作。</p></li><li><p><input disabled type="checkbox"> 所以要避免头结点和尾部节点加载到同一个缓存行。</p></li></ul><blockquote><p>下面的两种场景使用volatile变量时不需要追加到64字节。</p><ul><li>缓存行非64字节宽的处理器</li><li>共享变量不会被频繁地写，那么就没有必要读入那么多字节进缓存了。</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>多线程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入了解一下JVM</title>
    <link href="/2022/10/26/202210/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/10/26/202210/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<blockquote><h1 id="深入了解一下JVM"><a href="#深入了解一下JVM" class="headerlink" title="深入了解一下JVM"></a>深入了解一下JVM</h1></blockquote><h2 id="1-什么是JVM"><a href="#1-什么是JVM" class="headerlink" title="1:什么是JVM"></a>1:什么是JVM</h2><h3 id="1-1一次编译，到处执行"><a href="#1-1一次编译，到处执行" class="headerlink" title="1.1一次编译，到处执行"></a>1.1一次编译，到处执行</h3><p><em>jvm又称java 虚拟机。用来将java语言与操作系统交互的桥梁，jvm将java文件编译成class文件，class文件是二进制语言，可以被机器执行。不同的操作系统有不同的jvm , 在任何平台上执行的java代码会被解释成一致的class文件，实现了一次编译，到处执行。</em></p><h2 id="2-什么是JMM"><a href="#2-什么是JMM" class="headerlink" title="2:什么是JMM"></a>2:什么是JMM</h2><h3 id="2-1java内存模型"><a href="#2-1java内存模型" class="headerlink" title="2.1java内存模型"></a>2.1java内存模型</h3><p>jmm又叫java内存模型。如图所示</p><p><img src="https://pic1.imgdb.cn/item/6359356c16f2c2beb1a7961a.png"></p><h3 id="2-2volatile"><a href="#2-2volatile" class="headerlink" title="2.2volatile"></a>2.2volatile</h3><blockquote><ul><li>volatile的底层原理其实就是通过lock信号和MESI协议通知所有的处理器缓存失效，并且把数据更新到了内存。</li></ul></blockquote><h3 id="2-3java对象头"><a href="#2-3java对象头" class="headerlink" title="2.3java对象头"></a>2.3java对象头</h3><blockquote><p>synchronized用的锁是存在java对象头里的。</p></blockquote><h3 id="2-4锁的升级及对比"><a href="#2-4锁的升级及对比" class="headerlink" title="2.4锁的升级及对比"></a>2.4锁的升级及对比</h3><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁和解锁不需要额外的消耗,和执行非同步方法执行速度可以忽略</td><td>如果线程间存在竞争，会带来额外的锁撤销的消耗</td><td>适用于只有一个线程的同步块场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的相应速度</td><td>如果始终得不到锁竞争的线程，使用自旋会消耗CPU</td><td>追求相应时间，同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不需要自旋，不会消耗CPU</td><td>线程阻塞，响应速度缓慢</td><td>追求吞吐量，同步块执行速度较长</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 线程安全的计数器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicCounter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 非线程安全的计数器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">safeCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">oldCount</span> <span class="hljs-operator">=</span> atomicCounter.get();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">suc</span> <span class="hljs-operator">=</span> atomicCounter.compareAndSet(oldCount, ++oldCount);<br>            <span class="hljs-keyword">if</span> (suc) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">count</span><span class="hljs-params">()</span> &#123;<br>        counter++;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Counter</span> <span class="hljs-variable">cas</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Counter</span>();<br>        List &lt; Thread &gt; ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span> &lt; &gt; (<span class="hljs-number">512</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100</span>; j++) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() - &gt; &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>                    cas.count();<br>                    cas.safeCount();<br>                &#125;<br>            &#125;);<br>            ts.add(t);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Thread t: ts) &#123;<br>            t.start();<br>        &#125;<br><br>        <span class="hljs-comment">// 等待所有线程执行完毕</span><br>        <span class="hljs-keyword">for</span> (Thread t: ts) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 阻塞调用此方法的线程(主线程)，直到目标线程执行完毕</span><br>                t.join();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        System.out.println(cas.counter);<br>        System.out.println(cas.atomicCounter);<br>        System.out.println(System.currentTimeMillis() - start);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基本配置</title>
    <link href="/2022/10/25/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/10/25/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>图床</td><td><a href="https://www.superbed.cn/timeline">https://www.superbed.cn/timeline</a></td></tr><tr><td>github账号</td><td><a href="mailto:&#50;&#x34;&#56;&#x36;&#x31;&#x31;&#56;&#54;&#50;&#55;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;">&#50;&#x34;&#56;&#x36;&#x31;&#x31;&#56;&#54;&#50;&#55;&#64;&#113;&#x71;&#46;&#99;&#x6f;&#x6d;</a></td></tr><tr><td>github密码</td><td>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</td></tr><tr><td>github密码</td><td>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</td></tr><tr><td></td><td>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</td></tr></tbody></table><p>idea jrebel 破解：</p><p><a href="https://www.cnblogs.com/emmetyang/p/16443766.html">https://www.cnblogs.com/emmetyang/p/16443766.html</a></p>]]></content>
    
    
    <categories>
      
      <category>博客基本配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客基本配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
